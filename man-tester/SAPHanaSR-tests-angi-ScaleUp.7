.\" Version: 1.2
.\"
.TH SAPHanaSR-tests-angi-ScaleUp 7 "18 Sep 2024" "" "SAPHanaSR-angi"
.\"
.SH NAME
SAPHanaSR-tests-angi-ScaleUp \- Functional tests for SAPHanaSR Scale-Up.
.PP
.\"
.SH DESCRIPTION
.PP
Functional test are shipped for scale-up scenarios. This tests could be run
out-of-the-box. The test cases are defined in dedicated files.
See manual page SAPHanaSR-tests-syntax(5) for syntax details. Details like
performed steps or expected behaviour of cluster and HANA are explained in
SAPHanaSR-tests-description(7).
.PP
Each test can be executed by running the command SAPHanaSR-testCluster with
appropriate parameters. See manual page SAPHanaSR-testCluster(8).
.PP
Overview on predefined functional tests for scale-up:
.TP
\fBblock_manual_takeover\fP
Blocked manual takeover, for susTkOver.py.
.TP
\fBblock_sr\fP
Block HANA SR and check SFAIL attribute, unblock to recover, for susHanaSR.py.
.TP
\fBblock_sr_and_freeze_prim_fs\fP
Block HANA SR and freeze HANA FS on primary master node.
.TP
\fBflup\fP
Like nop but very short sleep, just checking the test engine.
.TP
\fBfree_log_area\fP
Free HANA log area on primary site.
.TP
\fBfreeze_prim_fs\fP
Freeze HANA FS on primary master node.
.TP
\fBfreeze_secn_fs\fP
Freeze HANA FS on secondary master node.
.TP
\fBkill_prim_indexserver\fP
Kill primary indexserver, for susChkSrv.py (action_on_lost=kill).
.TP
\fBkill_prim_inst\fP
Kill primary instance.
.TP
\fBkill_prim_ipaddr\fP
Kill primary HANA IP address once.
.\" .TP
.\" \fBkill_prim_nameserver\fP
.\" Kill primary nameserver.
.TP
\fBkill_prim_nic\fP
Kill primary HANA network interface (IPAddr2 start on-fail=fence). Not yet implemented.
.TP
\fBkill_prim_node\fP
Kill primary node.
.TP
\fBkill_prim_pacemakerd\fP
Kill primary pacemakerd (PCMK_fail_fast=yes).
.TP
\fBkill_prim_pacemkr-ctrld\fP
Kill primary pacemaker-controld (PCMK_fail_fast=yes).
.TP
\fBkill_prim_saphostexec\fP
Kill primary saphostexec.
.\" .TP
.\" \fBkill_prim_xsengine\fP
.\" Kill primary xsengine.
.TP
\fBkill_secn_indexserver\fP
Kill secondary indexserver, for susChkSrv.py (action_on_lost=kill).
.TP
\fBkill_secn_inst\fP
Kill secondary instance.
.TP
\fBkill_secn_nameserver\fP
Kill secondary nameserver.
.TP
\fBkill_secn_node\fP
Kill secondary node.
.TP
\fBkill_secn_pacemakerd\fP
Kill secondary pacemakerd (PCMK_fail_fast=yes).
.TP
\fBkill_secn_pacemkr-ctrld\fP
Kill secondary pacemaker-controld (PCMK_fail_fast=yes).
.TP
\fBkill_secn_xsengine\fP
Kill secondary xsengine.
.TP
\fBmaintenance_cluster_bootstrap\fP
Maintenance procedure, initially configuring cluster resources.
.TP
\fBmaintenance_cluster_hana_running\fP
Maintenance procedure with stopping and restarting cluster, keep HANA running.
.TP
\fBmaintenance_cluster_turn_hana\fP
Maintenance procedure, manually turning HANA sites.
.TP
\fBmaintenance_with_standby_nodes\fP
Maintenance procedure, standby+online secondary then standby+online primary.
.TP
\fBnop\fP
No operation - check, wait and check again (stability check).
.TP
\fBone_stable_hour\fP
Check regulary for one hour that there is no failure, like nop.
.TP
\fBregister_prim_cold_hana\fP
Stop cluster, do manual takeover, leave former primary down and unregistered, start cluster. Not yet implemented. 
.TP
\fBrestart_cluster_hana_running\fP
Stop and restart cluster, keep HANA running. Slightly differs from maintenance.
.TP
\fBrestart_cluster\fP
Stop and restart cluster and HANA.
.TP
\fBrestart_cluster_turn_hana\fP
Stop cluster and HANA, manually start and takeover HANA, start cluster.
.TP
\fBsplit_brain_prio\fP
Network split-brain with priority fencing.
.TP
\fBstandby_prim_node\fP
Set primary node standby and online again.
.TP
\fBstandby_secn_node\fP
Set secondary node standby and online again.
.PP
.\"
.SH EXAMPLES
.PP
* List tests for SAPHanaSR-angi scal-up scenarios
.PP
.RS 2
# ls /usr/share/SAPHanaSR-tester/json/angi-ScaleUp/
.RE
.PP
.\"
.SH FILES
.\"
.TP
/usr/share/SAPHanaSR-tester/json/angi-ScaleUp/
functional tests for SAPHanaSR-angi scale-up scenarios.
.TP
/usr/bin/sct_test_*
shell scripts for un-easy tasks on the cluster nodes.
.PP
.\"
.SH REQUIREMENTS
.\"
See the REQUIREMENTS section in SAPHanaSR-tester(7) and SAPHanaSR-angi(7).
Further, HANA database and Linux cluster are configured according to the SUSE
setup guide for the scale-up performance-optimised scenario.
No immediate fencing is configured, except for the SAPHanaFilesystem RA.
Of course, HANA database and Linux cluster have certain requirements.
Please refer to the product documentation.
.PP
.\"
.SH BUGS
.PP
In case of any problem, please use your favourite SAP support process to open
a request for the component BC-OP-LNX-SUSE.
Please report any other feedback and suggestions to feedback@suse.com.
.PP
.\"
.SH SEE ALSO
.PP
\fBSAPHanaSR-tester\fP(7) , \fBSAPHanaSR-testCluster\fP(8) ,
\fBSAPHanaSR-tests-description\fP(7) , \fBSAPHanaSR-tests-syntax\fP(5) ,
\fBSAPHanaSR-tests-angi-ScaleOut\fP(7) ,
\fBSAPHanaSR-angi\fP(7) , \fBSAPHanaSR-showAttr\fP(8)
.PP
.\"
.SH AUTHORS
.PP
F.Herschel, L.Pinne.
.PP
.\"
.SH COPYRIGHT
.PP
(c) 2023-2024 SUSE LLC
.br
The package SAPHanaSR-tester comes with ABSOLUTELY NO WARRANTY.
.br
For details see the GNU General Public License at
http://www.gnu.org/licenses/gpl.html
.\"
