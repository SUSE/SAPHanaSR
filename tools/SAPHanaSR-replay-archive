#!/usr/bin/python3
# pylint: disable=consider-using-f-string
# pylint: disable=fixme
"""
 SAPHanaSR-replay-archive
 Author:       Fabian Herschel, June 2023
 License:      GNU General Public License (GPL)
 Copyright:    (c) 2023-2025 SUSE LLC

# TODO: STEP01: extract files from crm_report-archive ? - Find files in dir is already implemented
# TODO: STEP02: Think also about multi SID implementation - maybe by using multiple HanaCluster objects (one per SID)
"""

#global TOOL_VERSION
TOOL_VERSION = "1.0.20250815"
# TODO pylint's constant vs variable detection is broken
# pylint: disable=invalid-name

# pylint: disable=wrong-import-position
# pylint: disable=unused-import
import argparse
import json
import os
import re
import sys
from dateutil import parser as dateutil_parser
sys.path.insert(1, '/usr/lib/SAPHanaSR-angi')
from saphana_sr_tools import HanaCluster,HanaStatus
# pylint: enable=wrong-import-position
# pylint: enable=unused-import

if __name__ == "__main__":
    myCluster = HanaCluster()
    parser = argparse.ArgumentParser()
    parser.add_argument("--cib", nargs="+", help="specify the cibfile file(s) (alteranative for --dir)")
    parser.add_argument("--dir", nargs="+", help="specify the directory where to search for cib files (alternative for --cib)")
    parser.add_argument("--pattern", nargs="+", help="specify the search pattern(s) (optional in combination with --dir)")
    parser.add_argument("--format", help="output format ([table], path, script, json)")
    parser.add_argument("--from", help="select 'from' - timepoint ('YYYY-M-D H:M:S')")
    parser.add_argument("--properties", help="specify the properties file")
    parser.add_argument("--experimental_attributes", nargs="+", help="experimental only - might be deleted later; global:attr1,attr2 site:attr3,attr3 host:attr4,attr5,attr6")
    parser.add_argument("--select", help="selecton of attributes to be printed (default, [test], minimal, sr, all)")
    parser.add_argument("--sid", help="specify the sid to check for")
    parser.add_argument("--sort", help="specify the column name to sort by")
    parser.add_argument("--to", help="select 'to' - timepoint ('YYYY-M-D H:M:S')")
    parser.add_argument("--version", help="output version and exit", action="store_true")
    #parser.add_argument("--dumpFailures", help="print failed checks per loop",
    #                    action="store_true")
    args = parser.parse_args()
    if args.version:
        print(f"{TOOL_VERSION}")
        sys.exit(0)
    if args.cib:
        myCluster.config['cib_file_list'] = args.cib
    if args.dir:
        myCluster.config['dir_list'] = args.dir
    if args.pattern:
        myCluster.config['pattern_list'] = args.pattern
    # args.from would create a namespace conflict so extracting 'from' using vars(args)
    if 'from' in vars(args) and vars(args)['from']:
        dt = dateutil_parser.parse(vars(args)['from'])
        myCluster.config['from'] = int(dt.timestamp())
    if args.format:
        myCluster.config['format'] = args.format
    if args.properties:
        myCluster.config['properties_file'] = args.properties
    if args.select:
        myCluster.config['select'] = args.select
    if args.sid:
        myCluster.config['sid'] = args.sid.lower()
    if args.sort:
        if args.sort[0] == '-':
            myCluster.config['sort-reverse'] = True
            myCluster.config['sort'] = args.sort[1:]
        elif args.sort[0] == '+':
            myCluster.config['sort-reverse'] = False
            myCluster.config['sort'] = args.sort[1:]
        else:
            myCluster.config['sort'] = args.sort
    if args.to:
        dt = dateutil_parser.parse(args.to)
        myCluster.config['to'] = int(dt.timestamp())
    if args.experimental_attributes:
        exp_attr = args.experimental_attributes
        if isinstance(exp_attr, list):
            exp_attr = " ".join(exp_attr)  # convert list to a string with each element
        myCluster.config['show_attributes'] = exp_attr
        myCluster.config['select'] = 'cmdline'
        myCluster.set_selections()
    myCluster.read_properties()
    dir_list = myCluster.config.get('dir_list', None)
    cib_file_list = myCluster.config.get('cib_file_list', [])
    if dir_list:
        for single_dir in dir_list:
            file_list = myCluster.find(single_dir, pattern=myCluster.config.get('pattern_list', None)) # use default patterns pe-input-nnn.bz2 and pe-warn-nnn.bz2
            if file_list:
                cib_file_list.extend(file_list)
    #
    # here the cib files iteration would begin
    #   - we need to read all given cib files
    #   - sort the found data dictionaries by cib-date
    #   - output all data dictionaries, filtered by from+to
    #
    # SAPHanaSR-replay-archive will not call the 'life' cluster, if cib_file_list is empty
    for cib_file in cib_file_list:
        myHana    = HanaStatus(myCluster.config, selections=myCluster.selections)
        myHana.xml_import(cib_file)
        multi_sid = False
        if myCluster.config['sid'] is None:
            myHana.get_sids()
            if len(myHana.sids) == 0:
                print("ERR: No SID found in cluster config")
                sys.exit(1)
            elif len(myHana.sids) > 1:
                print(f"WARN: Multiple SIDs found in cluster config: {str(myCluster.sids)} Please specify SID using --sid <SID>")
                multi_sid = False
                sys.exit(1)
            else:
                myHana.config['sid'] = myHana.sids[0].lower()
                myCluster.config['sid'] = myHana.sids[0].lower()
        myHana.fill_glob_dict()
        if 'cib-time' in myHana.glob_dict['global']:
            #print(f"dbg: test time filter")
            dt = dateutil_parser.parse(myHana.glob_dict['global']['cib-time'])
            cibtime = int(dt.timestamp())
            myHana.ts = cibtime
            if myCluster.config['from'] <= cibtime <= myCluster.config['to']:
                pass
            else:
                print(f"Filter cib-time {myHana.glob_dict['global']['cib-time']}")
                continue
        if len(myCluster.multi_status) == 0:
            myCluster.multi_status.insert(0, myHana)
        else:
            # search position where to insert the new hana_status
            pos = 0
            inserted = 0
            for hana_status in myCluster.multi_status:
                if myHana.ts < hana_status.ts:
                    myCluster.multi_status.insert(pos, myHana)
                    inserted = 1
                    break
                pos += 1
            if inserted == 0:
                myCluster.multi_status.insert(pos, myHana)  # insert at the end, if it is not inserted before
        myHana.fill_res_dict()
        myHana.fill_site_dict()
        myHana.fill_host_dict()

    for myHana in myCluster.multi_status:
        oformat = "table"
        if 'format' in myCluster.config:
            oformat = myCluster.config['format']
        if oformat == "table":
            index = myCluster.config['sort']
            index_type = 'str'
            index_reverse = myCluster.config['sort-reverse']
            if index is None:
                myHana.print_dic_as_table(myHana.glob_dict, "global", "Global")
                myHana.print_dic_as_table(myHana.res_dict, "resource", "Resource")
                myHana.print_dic_as_table(myHana.site_dict, "site", "Site")
                myHana.print_dic_as_table(myHana.host_dict, "host", "Host")
            else:
                myHana.print_dic_as_table_sort_by(myHana.glob_dict, index, index_type, index_reverse, "global",   "Global")
                myHana.print_dic_as_table_sort_by(myHana.res_dict, index, index_type, index_reverse, "resource", "Resource")
                myHana.print_dic_as_table_sort_by(myHana.site_dict, index, index_type, index_reverse, "site",     "Site")
                myHana.print_dic_as_table_sort_by(myHana.host_dict, index, index_type, index_reverse, "host",     "Host")
        elif oformat == "json":
            myHana.print_all_as_json()
        elif oformat in {"path", "script"}:
            cib_time=0
            if 'cib-time' in myHana.glob_dict["global"]:
                cib_time = myHana.glob_dict["global"]['cib-time']
            myHana.print_dic_as_path(myHana.glob_dict, "global", "Global", quote='"', ts=cib_time)
            myHana.print_dic_as_path(myHana.res_dict, "resource", "Resource", quote='"', ts=cib_time)
            myHana.print_dic_as_path(myHana.site_dict, "site", "Site", quote='"', ts=cib_time)
            myHana.print_dic_as_path(myHana.host_dict, "host", "Host", quote='"', ts=cib_time)
    if len(cib_file_list) == 0:
        print("ERROR: No cib files found")
        sys.exit(2)
