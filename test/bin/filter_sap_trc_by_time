#!/usr/bin/python3
#
"""
 filter_sap_trc_by_time
 Author: Fabian Herschel
 License:      GNU General Public License (GPL)
 Copyright:    (c) 2024 SUSE LLC

 SAP timestamps are looking like:
 2024-01-17 16:17:30.891505
 %Y   %m %d %H %M %S %f
"""
#
##################
#
# first step for today - filter a sap timestamp which should be between a start and a top reference time
# all time stamps (in sap trace message, start-timepoint and stop-timepoint must match the format %Y-%m-%d %H:%M:%S.%f
# TODO: for start and endtime also allow "%Y-%m-%d", "%H:%M:%S", %H:%M",    "%Y-%m-%d %H:%M:%S" and "%Y-%m-%d %H:%M"
#                                        day         time        time_short day_time                day_time_short
#
# second step get message lines from SPA HANA trace file
# TODO: read trace line by line
# TODO: search/match for a SAP-trace-timestring like %Y-%m-%d %H:%M:%S.%f
#
# third step command line parameter handling (argparse)
# TODO: tracefile, starttime, endtime

import datetime

format_time_scan = "%Y-%m-%d %H:%M:%S.%f"
filter_time_begin = "2024-01-17 15:00:00.0"
filter_time_end = "2024-01-17 17:00:00.0"

sap_time_string = "2024-01-17 17:00:00.0"
#sap_time_string = "2024-01-17 17:00:00"

filter_time_begin_ts = int(datetime.datetime.strptime(filter_time_begin, format_time_scan).timestamp())
filter_time_end_ts = int(datetime.datetime.strptime(filter_time_end, format_time_scan).timestamp())

sap_time_ts = int(datetime.datetime.strptime(sap_time_string, format_time_scan).timestamp())

if filter_time_begin_ts <= sap_time_ts <= filter_time_end_ts:
    print(f"message from time {sap_time_string} will be printed")


