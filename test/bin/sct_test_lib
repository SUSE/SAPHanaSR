#!/bin/bash
#
# sct_test_lib
#
# (c) 2025 SUSE LLC
# Author: F.Herschel, L.Pinne.
# GNU General Public License v2. No warranty.
# http://www.gnu.org/licenses/gpl.html
set -u

function init()
{
    G_CMD_CRM="/usr/sbin/crm"
    G_CMD_CRMATTR="/usr/sbin/crm_attribute"
    G_CMD_IPTABLES="/usr/sbin/iptables"
    G_CMD_SYSTEMCTL="/usr/bin/systemctl"
    G_CMD_SHOWATTR="/usr/bin/SAPHanaSR-showAttr"   # for 'classic' you need the SAPHanaSR-tester-client package
    G_CMD_SAPCONTROL="sapcontrol"                  # maybe we need the full path in the future (for non-root sudo-i-fy)
    G_CMD_HDBNSUTIL="hdbnsutil"                    # maybe we need the full path in the future (for non-root sudo-i-fy)
    G_CMD_HDBSQL="hdbsql"                          # maybe we need the full path in the future (for non-root sudo-i-fy)
    G_CMD_SAP_PYTHON3="python3"                    # maybe we need the full path in the future (for non-root sudo-i-fy)
    G_CMD_SAP_PYTHON3="HDB"                        # maybe we need the full path in the future (for non-root sudo-i-fy)
    G_CMD_FSFREEZE="/sbin/fsfreeze"
    G_CMD_RCNETWORK="/sbin/rcnetwork"
    G_CMD_CIBADMIN="/usr/sbin/cibadmin"
    G_CMD_CS_WFIDLE="/usr/sbin/cs_wait_for_idle"
    G_CMD_CAT="/usr/bin/cat"
    G_CMD_RM="/usr/bin/rm"
    G_CMD_FIND="/usr/bin/find"
    G_CMD_IP="/sbin/ip"
    G_CMD_SUPPORTCFG="/sbin/supportconfig"
}

#
# cluster calls either need root or user with haclient group
#
function sctl_get_curr_prim()
{
    # sctl_get_curr_prim <node>
    local currPrimary
    local target_host="$1"
    local rc=0
    currPrimary="$(ssh "${target_host}" "$G_CMD_SHOWATTR --format=tester" | awk -F'/' '/score="150"/ { print $2 }' )"; rc=$?
    echo "$currPrimary"
    return $rc
}

function get_curr_secn()
{
    # get_curr_secn <node>
    local currSecondary
    local target_host="$1"
    local rc=0
    currSecondary="$(ssh "${target_host}" "$G_CMD_SHOWATTR --format=tester" | awk -F'/' '/score="100"/ { print $2 }' )"; rc=$?
    echo "$currSecondary"
    return $rc
}

function sctl_get_curr_prim_worker()
{
    # sctl_get_curr_prim <node>
    local currPrimWorker
    local target_host="$1"
    local rc=0
    currPrimWorker="$(ssh "${target_host}" "$G_CMD_SHOWATTR --format=tester" | awk -F'/' '/score="-10000"/ { print $2 }' )"; rc=$?
    echo "$currPrimWorker"
    return $rc
}

function get_curr_secn_worker()
{
    # get_curr_secn_worker <node>
    local currSecnWorker
    local target_host="$1"
    local rc=0
    currSecnWorker="$(ssh "${target_host}" "$G_CMD_SHOWATTR --format=tester" | awk -F'/' '/score="-12200"/ { print $2 }' )"; rc=$?
    echo "$currSecnWorker"
    return $rc
}

function get_site()
{
    # get_site <node> <hana-node>
    local site
    local target_host="$1"
    local hana_node="$2"
    local rc=0
    site=$(ssh "${target_host}" "$G_CMD_SHOWATTR --format=tester" | awk -F'=' '$0 ~ node".site" { print $2 }' node="$hana_node"); rc=$?
    site="${site//\"/}"
    echo "$site"
    return $rc
}

function get_vhost()
{
    # get_vhost <node> <hana-node>
    local vhost
    local target_host="$1"
    local hana_node="$2"
    local rc=0
    vhost=$(ssh "${target_host}" "$G_CMD_SHOWATTR --format=tester" | awk -F'=' '$0 ~ node".*vhost=" { print $2 }' node="$hana_node"); rc=$?
    vhost="${vhost//\"/}"
    echo "$vhost"
    return $rc
}

#
# kill process either need root or process-owner user
#
function sctl_kill_process()
{
    # sctl_kill_process <node> <proc-user> <proc-pattern> <signal>
    local target_host="$1"
    local proc_user="$2"
    local proc_pattern="$3"
    local proc_signal="$4"
    local rc=0
    cs_ssh --hosts "${target_host}" --command "pgrep -u ${proc_user} -f ${proc_pattern}; pkill -u $proc_user} -f ${proc_pattern}"; rc=$?
    return $rc
}

#
# iptables need root user
#
function run_iptables()
{
    # run_iptables <node> <iptables-command> (without 'iptables')
    local target_host="$1"
    local iptables_cmd="$2"
    local rc=0
    cs_ssh --hosts "${target_host}" --command "$G_CMD_IPTABLES $iptables_cmd"; rc=$?
    return $rc
}

#
# cluster calls need either root or user with group haclient
#
function run_crm()
{
    # run_crm <node> <crm-command> (without "crm")
    local target_host="$1"
    local crm_cmd="$2"
    local rc=0
    cs_ssh --hosts "${target_host}" --command "$G_CMD_CRM $crm_cmd"; rc=$?
    return $rc
}

function run_crmattr()
{
    # run_crmattr <node> <crmattr-command> (without "crm_attribute")
    local target_host="$1"
    local crm_attribute_cmd="$2"
    local rc=0
    cs_ssh --hosts "${target_host}" --command "$G_CMD_CRMATTR $crm_attribute_cmd"; rc=$?
    return $rc
}

function run_cibadmin()
{
    # run_cibadmin <node> <cibadmin-command> (without "cibadmin")
    local target_host="$1"
    local crm_cibadmin_cmd="$2"
    local rc=0
    cs_ssh --hosts "${target_host}" --command "$G_CMD_CIBADMIN $crm_cibadmin_cmd"; rc=$?
    return $rc
}

function run_cs_wf_idle()
{
    # run_cs_wf_idle <node> <cs_wf_idle-command> (without "cs_wf_idle")
    local target_host="$1"
    local cs_wf_idle_cmd="$2"
    local rc=0
    cs_ssh --hosts "${target_host}" --command "$G_CMD_CS_WFIDLE $cs_wf_idle_cmd"; rc=$?
    return $rc
}

#
# system calls need root user
#
function run_systemctl()
{
    # run_systemctl <node> <systemctl-command> (without "systemctl")
    local target_host="$1"
    local systemctl_cmd="$2"
    local rc=0
    cs_ssh --hosts "${target_host}" --command "$G_CMD_SYSTEMCTL $systemctl_cmd"; rc=$?
    return $rc
}

function run_fsfreeze()
{
    # run_fsfreeze <node> <fsfreeze-command> (without "fsfreeze")
    local target_host="$1"
    local fsfreeze_cmd="$2"
    local rc=0
    cs_ssh --hosts "${target_host}" --command "$G_CMD_FSFREEZE $fsfreeze_cmd"; rc=$?
    return $rc
}

function run_rcnetwork()
{
    # run_rcnetwork <node> <rcnetwork-command> (without "rcnetwork")
    local target_host="$1"
    local rcnetwork_cmd="$2"
    local rc=0
    cs_ssh --hosts "${target_host}" --command "$G_CMD_RCNETWORK $rcnetwork_cmd"; rc=$?
    return $rc
}

function run_ip()
{
    # run_ip <node> <ip-command> (without "ip")
    local target_host="$1"
    local ip_cmd="$2"
    local rc=0
    cs_ssh --hosts "${target_host}" --command "$G_CMD_IIP $ip_cmd"; rc=$?
    return $rc
}

function run_supportcfg()
{
    # run_supportcfgip <node> <supportcfg-command> (without "supportconfig")
    local target_host="$1"
    local sc_cmd="$2"
    local rc=0
    cs_ssh --hosts "${target_host}" --command "$G_CMD_SUPPORTCFG $sc_cmd"; rc=$?
    return $rc
}

#
# sap calls need sid-adm user
#
function run_sapcontrol()
{
    # run_sapcontrol <node> <sapcontrol-command> (without "sapcontrol")
    local target_host="$1"
    local sidadm="$2"
    local sapcontrol_cmd="$3"
    local rc=0
    cs_ssh --hosts "${target_host}" --command "sudo -u $sidadm --login $G_CMD_SAPCONTROL $sapcontrol_cmd"; rc=$?
    return $rc
}

function run_sap_python3()
{
    # run_sap_python3 <node> <python3-command> (without "python3")
    local target_host="$1"
    local sidadm="$2"
    local python3_cmd="$3"
    local rc=0
    cs_ssh --hosts "${target_host}" --command "sudo -u $sidadm --login $G_CMD_SAP_PYTHON3 $python3_cmd"; rc=$?
    return $rc
}

function run_hdbsql()
{
    # run_hdbsql <node> <sidadm> <hanauserkey> <hdbsql-query> (without "hdbsql")
    #
    # needs su (or sudo) to <sid>adm
    #
    local target_host="$1"
    local sidadm="$2"
    local userkey="$3"
    local hdbsql_query="$4"
    local rc=0
    cs_ssh --hosts "${target_host}" --command "sudo -u $sidadm --login $G_CMD_HDBSQL -U $userkey $hdbsql_query"; rc=$?
    return $rc
}

function run_hdbnsutil()
{
    # run_hdbnsutil <node> <sidadm> <hdbnsutil-command> (without "hdbnsutil")
    local target_host="$1"
    local sidadm="$2"
    local hdbnsutil_cmd="$3"
    local rc=0
    cs_ssh --hosts "${target_host}" --command "sudo -u $sidadm --login $G_CMD_HDBNSUTIL $hdbnsutil_cmd"; rc=$?
    return $rc
}

function run_hdb()
{
    # run_hdb <node> <sidadm> <hdb-command> (without "HDB")
    local target_host="$1"
    local sidadm="$2"
    local hdb_cmd="$3"
    cs_ssh --hosts "${target_host}" --command "sudo -u $sidadm --login $G_CMD_HDB $hdb_cmd"; rc=$?
    local rc=0
    return $rc
}

#
# file actions needs either root or file-owner
#
function run_cat()
{
    # run_cat <node> <cat-command> (without "cat")
    local target_host="$1"
    local cat_cmd="$2"
    local rc=0
    ssh "${target_host}" "$G_CMD_CAT $cat_cmd"; rc=$?
    return $rc
}

function run_rm_file()
{
    # run_rm_file <node> <rm-file-command> (without "rm")
    local target_host="$1"
    local rm_file_cmd="$2"
    local rc=0
    ssh "${target_host}" "$G_CMD_RM $rm_file_cmd"; rc=$?
    return $rc
}

function run_find_action()
{
    # run_find_action <node> <sidadm> <find-cmd> (without "find")
    local target_host="$1"
    local sidadm="$2"
    local find_cmd="$3"
    local rc=0
    echo cs_ssh --hosts "${target_host}" --command "sudo -u $sidadm --login $G_CMD_FIND $find_cmd"; rc=$?
    cs_ssh --hosts "${target_host}" --command "sudo -u $sidadm --login $G_CMD_FIND $find_cmd"; rc=$?
    return $rc
}

init
