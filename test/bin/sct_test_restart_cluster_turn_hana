#!/bin/bash
#
# sct_test_restart_cluster_turn_hana
#
# (c) 2025 SUSE LLC
# Author: F.Herschel, L.Pinne.
# GNU General Public License v2. No warranty.
# http://www.gnu.org/licenses/gpl.html
#
# - cleanup mst-resource
# - stop cluster (including SAP HANA)
# - start both SAP HANA sites
# - takeover on secondary with suspend primary (gets the new primary)
# - register on primary in online mode (gets the new secondary)
# - check hook cache file
# - start cluster
#
# expected outcome: cluster running, SAP HANA instances running, SR roles are exchanged
#
set -u
src=${BASH_SOURCE[0]}
full_path=$(readlink -f "$src")
dir_path=$(dirname "$full_path")
source /usr/bin/sct_test_lib
source .test_properties
currPrimary=$(sctl_get_curr_prim "$node01")
currSecondary=$(sctl_get_curr_secn "${node01}")

# shellcheck disable=SC2029
logger --id -t "sct_test_restart_cluster_turn_hana" -s "Cleanup promotable resource"
sctl_run_crm "${node01}" "resource cleanup $mstResource"
sctl_run_cs_wf_idle "${node01}" "-s 2"


#########################################
# VHOSTS
# get vhosts from node names
#########################################

vhostPrim=$(sctl_get_vhost "${node01}" "$currPrimary")
vhostSecn=$(sctl_get_vhost "${node01}" "$currSecondary")
if [[ -z "$vhostPrim ]]; then
    vhostPrim="$currPrimary"
fi
if [[ -z "$vhostSecn ]]; then
    vhostPrim="$currSecondary"
fi

sitePrimary=$(sctl_get_site "${node01}" "$currPrimary")
siteSecondary=$(sctl_get_site "${node01}" "$currSecondary")

logger --id -t "sct_test_restart_cluster_turn_hana" -s "p=$currPrimary ($sitePrimary), s=$currSecondary, vhostPrim=$vhostPrim, vhostSecn=$vhostSecn"

logger --id -t "sct_test_restart_cluster_turn_hana" -s "Stop Cluster"
sctl_run_crm "${node02}" "cluster stop --all"

echo "==== SUSE Cluster Stopped ===="

logger --id -t "sct_test_restart_cluster_turn_hana" -s "Start HANA on $node01"
sctl_run_sapcontrol "$node01" "$sidadm" "-nr $instNr -function StartSystem"
logger --id -t "sct_test_restart_cluster_turn_hana" -s "Start HANA on $node02"
sctl_run_sapcontrol "$node02" "$sidadm" "-nr $instNr -function StartSystem"
sctl_run_sapcontrol "$node01" "$sidadm" "-nr $instNr -function WaitforStarted 300 10"
sctl_run_sapcontrol "$node02" "$sidadm" "-nr $instNr -function WaitforStarted 300 10"

while true; do
    run_sap_python3 "$currPrimary" "$sidadm" "exe/python_support/systemReplicationStatus.py 1>/dev/null"; rc=$?
    if [[ "$rc" != 15 ]]; then
        sleep 60
    else
        break
    fi
done

cacheFile="/hana/shared/$SID/HDB$instNr/.crm_attribute.$siteSecondary"
srHookCache=$( run_cat "$currPrimary" "$cacheFile" )
logger --id -t "sct_test_restart_cluster_turn_hana" -s "currPrimary=$currPrimary: $cacheFile: $srHookCache"

logger --id -t "sct_test_restart_cluster_turn_hana" -s "SAP HANA DBs started"
logger --id -t "sct_test_restart_cluster_turn_hana" -s "currSecondary=$currSecondary: sr_takeover suspendPrimary"

sctl_run_hdbnsutil "$currSecondary" "$sidadm" "-sr_takeover --suspendPrimary"

cacheFile="/hana/shared/$SID/HDB$instNr/.crm_attribute.$siteSecondary"
srHookCache=$( run_cat "$currPrimary" "$cacheFile" )
logger --id -t "sct_test_restart_cluster_turn_hana" -s "currPrimary=$currPrimary: $cacheFile: $srHookCache"

logger --id -t "sct_test_restart_cluster_turn_hana" -s "currPrimary=$currPrimary: sr_register online remoteHost=$vhostSecn"
sctl_run_hdbnsutil "$currPrimary" "$sidadm" "-sr_register --remoteHost=$vhostSecn --remoteInstance=$instNr --name=$sitePrimary --replicationMode=$srMode --operationMode=$opMode --online"

logger --id -t "sct_test_restart_cluster_turn_hana" -s "p=$currSecondary ($siteSecondary), s=$currPrimary"

cacheFile="/hana/shared/$SID/HDB$instNr/.crm_attribute.$sitePrimary"
srHookCache=$( run_cat "$currSecondary" "$cacheFile" )
logger --id -t "sct_test_restart_cluster_turn_hana" -s "currPrimary=$currSecondary: $cacheFile: $srHookCache"

while true; do
    run_sap_python3 "$currSecondary" "$sidadm" "exe/python_support/systemReplicationStatus.py 1>/dev/null"; rc=$?
    if [[ "$rc" != 15 ]]; then
        echo "DBG: fail - rc is $rc"
        sleep 60
    else
        echo "DBG: ok - rc is $rc"
        break
    fi
done

cacheFile="/hana/shared/$SID/HDB$instNr/.crm_attribute.$sitePrimary"
srHookCache=$( run_cat "$currSecondary" "$cacheFile" )
logger --id -t "sct_test_restart_cluster_turn_hana" -s "currPrimary=$currSecondary: $cacheFile: $srHookCache"
cacheFile="/hana/shared/$SID/HDB$instNr/.crm_attribute.$siteSecondary"
srHookCache=$( run_cat "$currPrimary" "$cacheFile" )
logger --id -t "sct_test_restart_cluster_turn_hana" -s "currSecondary=$currPrimary: $cacheFile: $srHookCache"

logger --id -t "sct_test_restart_cluster_turn_hana" -s "Start Cluster"
sctl_run_crm "$node01" "cluster start --all"
sleep 30
sctl_run_crm "$node01" "cluster wait_for_startup 60"
sctl_run_cs_wf_idle "$node01" "-s 10"

echo "==== SUSE Cluster Started ===="
#
