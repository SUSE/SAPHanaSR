#!/bin/bash
#
# sct_test_restart_cluster_turn_hana
#
# - cleanup mst-resource
# - stop cluster (including SAP HANA)
# - start both SAP HANA sites
# - takeover on secondary with suspend primary (gets the new primary)
# - register on primary in online mode (gets the new secondary)
# - check hook cache file
# - start cluster
#
# expected outcome: cluster running, SAP HANA instances running, SR roles are exchanged
#
src=${BASH_SOURCE[0]}
full_path=$(readlink -f  "$src")
dir_path=$(dirname "$full_path")
source .test_properties

# shellcheck disable=SC2029
logger --id -t "sct_test_restart_cluster_turn_hana" -s "Cleanup promotable resource"
ssh "${node01}" "crm resource cleanup $mstResource; cs_wait_for_idle -s 2"

currPrimary="$(ssh "${node01}" "/usr/bin/SAPHanaSR-showAttr --format=tester" | awk -F'/' '/score="150"/ { print $2 }' )"
currSecondary="$(ssh "${node01}" "/usr/bin/SAPHanaSR-showAttr --format=tester" | awk -F'/' '/score="100"/ { print $2 }' )"

#########################################
# VHOSTS
# get vhosts fom node names
# SAPHanaSR-showAttr --format=tester | grep pizbuin02.*vhost
#########################################

vhostPrim="$(ssh "${node01}" "/usr/bin/SAPHanaSR-showAttr --format=tester" | awk -F'=' '$0 ~ node".*vhost=" { print $2 }' node=$currPrimary | tr -d '"' )"
vhostSecn="$(ssh "${node01}" "/usr/bin/SAPHanaSR-showAttr --format=tester" | awk -F'=' '$0 ~ node".*vhost=" { print $2 }' node=$currSecondary | tr -d '"' )"
if [[ -z "$vhostPrim ]]; then
    vhostPrim="$currPrimary"
fi
if [[ -z "$vhostSecn ]]; then
    vhostPrim="$currSecondary"
fi

sitePrimary=$(ssh "${node01}" "/usr/bin/SAPHanaSR-showAttr --format=tester" | awk -F'=' '$0 ~ node".site" { print $2 }' node="$currPrimary")
sitePrimary="${sitePrimary//\"/}"
siteSecondary=$(ssh "${node01}" "/usr/bin/SAPHanaSR-showAttr --format=tester" | awk -F'=' '$0 ~ node".site" { print $2 }' node="$currSecondary")
siteSecondary="${siteSecondary//\"/}"

logger --id -t "sct_test_restart_cluster_turn_hana" -s "p=$currPrimary ($sitePrimary), s=$currSecondary, vhostPrim=$vhostPrim, vhostSecn=$vhostSecn"

logger --id -t "sct_test_restart_cluster_turn_hana" -s "Stop Cluster"
ssh "${node02}" "crm cluster stop --all"

echo "==== SUSE Cluster Stopped ===="

logger --id -t "sct_test_restart_cluster_turn_hana" -s "Start HANA on $node01"
ssh "$node01" 'su - '"$sidadm"' -c "sapcontrol -nr '$instNr' -function StartSystem"'
logger --id -t "sct_test_restart_cluster_turn_hana" -s "Start HANA on $node02"
ssh "$node02" 'su - '"$sidadm"' -c "sapcontrol -nr '$instNr' -function StartSystem"'
ssh "$node01" 'su - '"$sidadm"' -c "sapcontrol -nr '$instNr' -function WaitforStarted 300 10"'
ssh "$node02" 'su - '"$sidadm"' -c "sapcontrol -nr '$instNr' -function WaitforStarted 300 10"'

while true; do
    ssh "$currPrimary" 'su - '"$sidadm"' -c "python3 exe/python_support/systemReplicationStatus.py 1>/dev/null"'; rc=$?
    if [[ "$rc" != 15 ]]; then
        sleep 60
    else
        break
    fi
done

cacheFile="/hana/shared/$SID/HDB$instNr/.crm_attribute.$siteSecondary"
srHookCache=$( ssh "$currPrimary" 'cat '"$cacheFile"'' )
logger --id -t "sct_test_restart_cluster_turn_hana" -s "currPrimary=$currPrimary: $cacheFile: $srHookCache"

logger --id -t "sct_test_restart_cluster_turn_hana" -s "SAP HANA DBs started"
logger --id -t "sct_test_restart_cluster_turn_hana" -s "currSecondary=$currSecondary: sr_takeover suspendPrimary"

ssh "$currSecondary" 'su - '"$sidadm"' -c "hdbnsutil -sr_takeover --suspendPrimary"'

cacheFile="/hana/shared/$SID/HDB$instNr/.crm_attribute.$siteSecondary"
srHookCache=$( ssh "$currPrimary" 'cat '"$cacheFile"'' )
logger --id -t "sct_test_restart_cluster_turn_hana" -s "currPrimary=$currPrimary: $cacheFile: $srHookCache"

logger --id -t "sct_test_restart_cluster_turn_hana" -s "currPrimary=$currPrimary: sr_register online remoteHost=$vhostSecn"
ssh "$currPrimary" 'su - '"$sidadm"' -c "hdbnsutil -sr_register --remoteHost='"$vhostSecn"' --remoteInstance='"$instNr"' --name='"$sitePrimary"' --replicationMode='"$srMode"' --operationMode='"$opMode"' --online"'

logger --id -t "sct_test_restart_cluster_turn_hana" -s "p=$currSecondary ($siteSecondary), s=$currPrimary"

cacheFile="/hana/shared/$SID/HDB$instNr/.crm_attribute.$sitePrimary"
srHookCache=$( ssh "$currSecondary" 'cat '"$cacheFile"'' )
logger --id -t "sct_test_restart_cluster_turn_hana" -s "currPrimary=$currSecondary: $cacheFile: $srHookCache"

while true; do
    ssh "$currSecondary" 'su - '"$sidadm"' -c "python3 exe/python_support/systemReplicationStatus.py 1>/dev/null"'; rc=$?
    if [[ "$rc" != 15 ]]; then
        sleep 60
    else
        break
    fi
done

cacheFile="/hana/shared/$SID/HDB$instNr/.crm_attribute.$sitePrimary"
srHookCache=$( ssh "$currSecondary" 'cat '"$cacheFile"'' )
logger --id -t "sct_test_restart_cluster_turn_hana" -s "currPrimary=$currSecondary: $cacheFile: $srHookCache"
cacheFile="/hana/shared/$SID/HDB$instNr/.crm_attribute.$siteSecondary"
srHookCache=$( ssh "$currPrimary" 'cat '"$cacheFile"'' )
logger --id -t "sct_test_restart_cluster_turn_hana" -s "currSecondary=$currPrimary: $cacheFile: $srHookCache"

logger --id -t "sct_test_restart_cluster_turn_hana" -s "Start Cluster"
ssh "$node01" "crm cluster start --all"
sleep 30
ssh "$node01" "crm cluster wait_for_startup 60; cs_wait_for_idle -s 10"

echo "==== SUSE Cluster Started ===="
#
